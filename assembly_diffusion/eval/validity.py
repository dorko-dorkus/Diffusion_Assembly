"""Validation utilities for molecular graphs.

baseline: RDKit sanitization serves as the reference for chemical validity.
data_sources: molecular graphs generated by diffusion models and the RDKit
    toolkit for sanitization.
method: convert :class:`~assembly_diffusion.graph.MoleculeGraph` objects to
    RDKit molecules and attempt sanitization, returning ``None`` on failure.
metrics: ``sanitize_or_none`` yields a sanitized molecule or ``None``;
    :func:`is_valid` interprets this as a boolean validity indicator.
objective: provide deterministic RDKit-based checks to assess whether
    generated molecules obey valency and charge rules.
params: none.
repro: given the same graph and RDKit version, sanitization results are
    deterministic, ensuring reproducible validity evaluation.
"""

from __future__ import annotations

from ..graph import MoleculeGraph

try:  # pragma: no cover - RDKit optional
    from rdkit.Chem.rdchem import MolSanitizeException
except ImportError:  # pragma: no cover - handled at runtime
    MolSanitizeException = RuntimeError


def sanitize_or_none(graph: MoleculeGraph):
    """Return a sanitized RDKit molecule or ``None``.

    Parameters
    ----------
    graph:
        The molecular graph to sanitize.

    Returns
    -------
    rdkit.Chem.Mol | None
        Sanitized molecule if successful, otherwise ``None``.
    """

    try:
        return graph.to_rdkit()
    except (ValueError, RuntimeError, ImportError, MolSanitizeException):
        return None


def is_valid(graph: MoleculeGraph) -> bool:
    """Return ``True`` if ``graph`` can be sanitized by RDKit."""

    return sanitize_or_none(graph) is not None
