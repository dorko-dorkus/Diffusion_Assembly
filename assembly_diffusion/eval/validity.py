r"""Validation utilities for molecular graphs.

baseline: RDKit sanitization serves as the reference for chemical validity.
data_sources: molecular graphs generated by diffusion models and the RDKit
    toolkit for sanitization.
method: convert :class:`~assembly_diffusion.graph.MoleculeGraph` objects to
    RDKit molecules and attempt sanitization, returning ``None`` on failure.
metrics: validity rate ``V`` computed from ``N`` generated graphs ``g_i`` as

    .. math::

        V = \frac{1}{N} \sum_{i=1}^N \mathbb{1}[\text{sanitize}(g_i)]

    where ``sanitize`` indicates successful RDKit sanitization.
objective: provide deterministic RDKit-based checks to assess whether
    generated molecules obey valency and charge rules.
report: for experiments with multiple random seeds ``s``, compute ``V`` for
    each seed and report ``mean Â± std`` over ``s``.
params: none.
repro: given the same graph and RDKit version, sanitization results are
    deterministic, ensuring reproducible validity evaluation.
"""

from __future__ import annotations

import platform
import random
import subprocess
from pathlib import Path
from importlib import metadata

from ..graph import MoleculeGraph
from ..logging_config import get_logger

try:  # pragma: no cover - RDKit optional
    from rdkit.Chem.rdchem import MolSanitizeException
except ImportError:  # pragma: no cover - handled at runtime
    MolSanitizeException = RuntimeError


logger = get_logger(__name__)


def _git_hash() -> str:
    """Return the current git commit hash or ``"unknown"``."""

    repo_root = Path(__file__).resolve().parents[2]
    if not (repo_root / ".git").exists():
        return "unknown"
    try:
        return (
            subprocess.check_output(
                ["git", "rev-parse", "HEAD"],
                stderr=subprocess.DEVNULL,
                cwd=repo_root,
            )
            .decode()
            .strip()
        )
    except (subprocess.CalledProcessError, OSError):
        return "unknown"


def configure_reproducibility(seed: int) -> None:
    """Set random seeds and log environment and version information."""

    random.seed(seed)
    try:
        import numpy as np  # type: ignore

        np.random.seed(seed)
    except Exception:  # pragma: no cover - optional dependency
        pass
    try:
        import torch  # type: ignore

        torch.manual_seed(seed)
        if torch.cuda.is_available():  # pragma: no cover - GPU optional
            torch.cuda.manual_seed_all(seed)
    except Exception:  # pragma: no cover - optional dependency
        pass

    logger.info("Random seed set to %d", seed)
    logger.info("Python %s on %s", platform.python_version(), platform.platform())

    for pkg in ("rdkit", "numpy", "torch"):
        try:
            ver = metadata.version(pkg)
        except metadata.PackageNotFoundError:
            ver = "not installed"
        logger.info("%s version: %s", pkg, ver)

    logger.info("Git commit SHA: %s", _git_hash())


def sanitize_or_none(graph: MoleculeGraph):
    """Return a sanitized RDKit molecule or ``None``.

    Parameters
    ----------
    graph:
        The molecular graph to sanitize.

    Returns
    -------
    rdkit.Chem.Mol | None
        Sanitized molecule if successful, otherwise ``None``.
    """

    try:
        return graph.to_rdkit()
    except (ValueError, RuntimeError, ImportError, MolSanitizeException):
        return None


def is_valid(graph: MoleculeGraph) -> bool:
    """Return ``True`` if ``graph`` can be sanitized by RDKit."""

    return sanitize_or_none(graph) is not None
